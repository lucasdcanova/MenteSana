import { useState, useRef, useEffect } from "react";
import { useQuery, useMutation } from "@tanstack/react-query";
import { JournalEntry as JournalEntryType, InsertJournalEntry } from "@shared/schema";
import { apiRequest, queryClient } from "@/lib/queryClient";
import { useAuth } from "@/hooks/use-auth";
import { useToast } from "@/hooks/use-toast";
import { 
  Mic, 
  Loader2, 
  FileAudio, 
  Sparkles, 
  History, 
  Send, 
  X,
  PencilLine,
  BookText,
  ArrowLeft,
  StopCircle,
  Smile,
  Wind
} from "lucide-react";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";
import { Link } from "wouter";
import { m, LazyMotion, domAnimation, AnimatePresence } from "framer-motion";

export default function JournalPage() {
  const { user } = useAuth();
  const { toast } = useToast();
  const [isRecording, setIsRecording] = useState(false);
  const [recordingTime, setRecordingTime] = useState(0);
  const [audioUrl, setAudioUrl] = useState<string | null>(null);
  const [audioBlob, setAudioBlob] = useState<Blob | null>(null);
  const [textContent, setTextContent] = useState('');
  const [mood, setMood] = useState('neutro');
  const [transcriberMood, setTranscriberMood] = useState('neutro');
  const [showTextInput, setShowTextInput] = useState(false);
  const [isEnhancedAnalysis, setIsEnhancedAnalysis] = useState(true);
  const [processingFeedback, setProcessingFeedback] = useState(false);
  const [processingStep, setProcessingStep] = useState<string | null>(null);
  
  const mediaRecorderRef = useRef<MediaRecorder | null>(null);
  const chunksRef = useRef<BlobPart[]>([]);
  const timerRef = useRef<NodeJS.Timeout | null>(null);
  
  // Mutação para criar uma entrada de diário
  const createJournalEntryMutation = useMutation<JournalEntryType, Error, InsertJournalEntry>({
    mutationFn: async (entry: InsertJournalEntry) => {
      const res = await apiRequest('POST', '/api/journal-entries', entry);
      return await res.json();
    },
    onSuccess: () => {
      queryClient.invalidateQueries({ queryKey: ['/api/journal-entries/user'] });
      
      toast({
        title: "Entrada salva com sucesso",
        description: "Sua entrada foi adicionada ao diário",
        variant: "default",
      });
      
      // Limpar estados
      setAudioUrl(null);
      setAudioBlob(null);
      setTextContent('');
      setProcessingFeedback(false);
      setProcessingStep(null);
    },
    onError: (error: Error) => {
      toast({
        title: "Erro ao salvar entrada",
        description: error.message || "Ocorreu um erro ao salvar sua entrada",
        variant: "destructive",
      });
      setProcessingFeedback(false);
    },
  });
  
  // Mutação para transcrever áudio
  const transcribeAudioMutation = useMutation<any, Error, { audio: Blob, mood: string }>({
    mutationFn: async (data: { audio: Blob, mood: string }) => {
      if (!audioBlob) throw new Error("Nenhum áudio para transcrever");
      
      setProcessingFeedback(true);
      setProcessingStep("Processando áudio...");
      
      const formData = new FormData();
      formData.append("audio", data.audio);
      formData.append("mood", data.mood);
      
      const headers = new Headers();
      const res = await apiRequest('POST', '/api/journal-entries/transcribe', formData);
      
      return await res.json();
    },
    onSuccess: (data) => {
      setProcessingStep("Criando entrada...");
      
      if (!user?.id) {
        toast({
          title: "Erro de autenticação",
          description: "Você precisa estar logado para criar entradas no diário",
          variant: "destructive",
        });
        setProcessingFeedback(false);
        return;
      }
      
      createJournalEntryMutation.mutate({
        content: data.text,
        mood: transcriberMood,
        audioUrl: data.audioUrl || null,
        audioDuration: recordingTime,
        userId: user.id
      });
    },
    onError: (error: Error) => {
      toast({
        title: "Erro ao transcrever áudio",
        description: error.message || "Ocorreu um erro ao processar seu áudio",
        variant: "destructive",
      });
      setProcessingFeedback(false);
      setProcessingStep(null);
    },
  });
  
  // Iniciar gravação
  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      chunksRef.current = [];
      
      mediaRecorder.ondataavailable = (e) => {
        if (e.data.size > 0) {
          chunksRef.current.push(e.data);
        }
      };
      
      mediaRecorder.onstop = () => {
        const blob = new Blob(chunksRef.current, { type: 'audio/webm' });
        const url = URL.createObjectURL(blob);
        setAudioUrl(url);
        setAudioBlob(blob);
        
        // Liberando a trilha de áudio
        stream.getTracks().forEach(track => track.stop());
        
        // Envio automático do áudio após finalizar gravação
        const audioElement = new Audio(url);
        audioElement.onloadedmetadata = () => {
          // Verifica se o áudio tem conteúdo válido (duração maior que meio segundo)
          if (audioElement.duration > 0.5) {
            setProcessingFeedback(true);
            setProcessingStep("Processando áudio...");
            
            // Usar o humor neutro por padrão para processamento automático
            transcribeAudioMutation.mutate({
              audio: blob,
              mood: 'neutro'
            });
          } else {
            // Áudio muito curto, não processar
            toast({
              title: "Gravação muito curta",
              description: "A gravação precisa ser um pouco mais longa.",
              variant: "destructive",
            });
            
            // Limpar o áudio curto
            URL.revokeObjectURL(url);
            setAudioUrl(null);
            setAudioBlob(null);
          }
        };
      };
      
      // Iniciando gravação
      mediaRecorder.start();
      setIsRecording(true);
      setRecordingTime(0);
      
      // Iniciando o timer
      timerRef.current = setInterval(() => {
        setRecordingTime(prevTime => prevTime + 1);
      }, 1000);
      
    } catch (error) {
      console.error('Erro ao iniciar gravação:', error);
      toast({
        title: "Erro ao iniciar gravação",
        description: "Verifique se o acesso ao microfone está permitido",
        variant: "destructive",
      });
    }
  };
  
  // Parar gravação e enviar automaticamente
  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      setIsRecording(false);
      
      if (timerRef.current) {
        clearInterval(timerRef.current);
        timerRef.current = null;
      }
      
      // Configuramos o envio automático no evento onstop do mediaRecorder
    }
  };
  
  // Excluir áudio gravado
  const deleteAudio = () => {
    if (audioUrl) {
      URL.revokeObjectURL(audioUrl);
      setAudioUrl(null);
      setAudioBlob(null);
    }
  };
  
  // Alternar entre entrada por voz e texto
  const toggleInputMode = () => {
    if (isRecording) {
      stopRecording();
    }
    
    setShowTextInput(!showTextInput);
  };
  
  // Formatar tempo
  const formatTime = (seconds: number) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs < 10 ? '0' : ''}${secs}`;
  };
  
  // Formatar data
  const formatDate = (date: Date) => {
    return format(date, "d 'de' MMMM", { locale: ptBR });
  };
  
  // Processar entrada de texto
  const processTextInput = () => {
    if (!textContent.trim()) {
      toast({
        title: "Conteúdo vazio",
        description: "Por favor, digite algo antes de salvar",
        variant: "destructive",
      });
      return;
    }
    
    setProcessingFeedback(true);
    setProcessingStep("Criando entrada...");
    
    if (!user?.id) {
      toast({
        title: "Erro de autenticação",
        description: "Você precisa estar logado para criar entradas no diário",
        variant: "destructive",
      });
      setProcessingFeedback(false);
      return;
    }
    
    createJournalEntryMutation.mutate({
      content: textContent,
      mood,
      userId: user.id
    });
  };
  
  // Transcrever áudio
  const transcribeAudio = () => {
    if (!audioBlob) {
      toast({
        title: "Nenhum áudio gravado",
        description: "Por favor, grave um áudio antes de processar",
        variant: "destructive",
      });
      return;
    }
    
    transcribeAudioMutation.mutate({ 
      audio: audioBlob,
      mood: transcriberMood
    });
  };
  
  return (
    <div className="min-h-[100dvh] h-full flex flex-col bg-[#F9FAFB] overflow-hidden">
      {/* Cabeçalho com design iOS - glassmorphism e animação sutil */}
      <header 
        className="fixed top-0 left-0 right-0 pt-[env(safe-area-inset-top,12px)] px-4 py-3 bg-white/90 backdrop-blur-md z-20 border-b border-gray-100"
        style={{ WebkitBackdropFilter: "blur(10px)" }}
      >
        <div className="flex items-center justify-between">
          <div className="flex items-center gap-3">
            <Link to="/" className="flex items-center">
              <div 
                className="h-10 w-10 rounded-full bg-primary/5 overflow-hidden border border-primary/15 shadow-sm"
                style={{
                  boxShadow: "0 2px 10px rgba(0, 172, 138, 0.08)"
                }}
              >
                <img 
                  src={user?.profilePicture || "/assets/default-avatar.png"} 
                  alt="Avatar"
                  className="h-full w-full object-cover"
                  onError={(e) => {
                    (e.target as HTMLImageElement).src = "/assets/default-avatar.png";
                  }}
                />
              </div>
            </Link>
            
            <div>
              <h1 className="text-lg font-semibold text-gray-800">
                {user?.firstName ? `Olá, ${user.firstName}` : "Olá"}
              </h1>
              <p className="text-[13px] text-gray-500">
                {format(new Date(), "EEEE, d 'de' MMMM", { locale: ptBR })}
              </p>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <Link to="/breathing-exercise">
              <Button
                variant="ghost"
                size="icon"
                className="h-9 w-9 rounded-full bg-primary/5 hover:bg-primary/10 transition-all duration-300"
                style={{
                  boxShadow: "0 1px 5px rgba(0, 172, 138, 0.05)",
                  transform: "translateY(0)",
                }}
                onMouseDown={(e) => {
                  e.currentTarget.style.transform = "translateY(1px)";
                  e.currentTarget.style.boxShadow = "0 0 3px rgba(0, 172, 138, 0.05)";
                }}
                onMouseUp={(e) => {
                  e.currentTarget.style.transform = "translateY(0)";
                  e.currentTarget.style.boxShadow = "0 1px 5px rgba(0, 172, 138, 0.05)";
                }}
              >
                <Wind className="h-[18px] w-[18px] text-primary" />
              </Button>
            </Link>
            
            <Link to="/journal-history">
              <Button
                variant="ghost"
                size="icon"
                className="h-9 w-9 rounded-full bg-primary/5 hover:bg-primary/10 transition-all duration-300"
                style={{
                  boxShadow: "0 1px 5px rgba(0, 172, 138, 0.05)",
                  transform: "translateY(0)",
                }}
                onMouseDown={(e) => {
                  e.currentTarget.style.transform = "translateY(1px)";
                  e.currentTarget.style.boxShadow = "0 0 3px rgba(0, 172, 138, 0.05)";
                }}
                onMouseUp={(e) => {
                  e.currentTarget.style.transform = "translateY(0)";
                  e.currentTarget.style.boxShadow = "0 1px 5px rgba(0, 172, 138, 0.05)";
                }}
              >
                <History className="h-[18px] w-[18px] text-primary" />
              </Button>
            </Link>
          </div>
        </div>
      </header>
      
      {/* Espaçamento para compensar o header fixo */}
      <div className="pt-[calc(env(safe-area-inset-top,12px)+62px)]"></div>
      
      {/* Banner do diário com estilo iOS - glassmorphism e elevação sutil */}
      <div 
        className="px-4 py-3 bg-white/90 backdrop-blur-sm mt-2 mx-4 rounded-xl border border-gray-100 transition-all duration-300"
        style={{ 
          WebkitBackdropFilter: "blur(10px)",
          boxShadow: "0 4px 15px rgba(0, 0, 0, 0.03)"
        }}
      >
        <div className="flex items-center">
          <div 
            className="bg-primary/10 rounded-full p-2 mr-3"
            style={{
              boxShadow: "0 1px 5px rgba(0, 172, 138, 0.1) inset"
            }}
          >
            <BookText className="h-5 w-5 text-primary" />
          </div>
          <div>
            <p className="text-[13px] font-medium text-gray-800">Seu diário</p>
            <p className="text-xs text-gray-500">Registre seus pensamentos e emoções</p>
          </div>
        </div>
      </div>
      
      {/* Área principal - Otimizada para iOS com cards elevados e espaçamentos melhorados */}
      <div className="flex-1 px-4 flex flex-col relative overflow-hidden py-3">
        <div className="px-1 mb-3">
          <h2 className="text-lg font-semibold text-gray-800">
            {showTextInput
              ? "O que você está pensando hoje?"
              : audioUrl
                ? "Gravação pronta!"
                : isRecording
                  ? "Gravando..."
                  : "Como você está se sentindo hoje?"
            }
          </h2>
          <p className="text-[13px] text-gray-500">
            {showTextInput
              ? "Compartilhe seus pensamentos e sentimentos"
              : audioUrl
                ? "Toque para reproduzir sua gravação"
                : isRecording
                  ? "Estou ouvindo atentamente"
                  : "Toque no botão para compartilhar usando sua voz"
            }
          </p>
        </div>
        
        <LazyMotion features={domAnimation}>
          <AnimatePresence mode="wait">
            {/* Área de TEXTO - Otimizada com elementos mais arredondados e sombras sutis */}
            {showTextInput ? (
              <m.div
                key="text-input"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2, ease: "easeOut" }}
                className="w-full flex-1 flex flex-col max-h-[calc(100dvh-220px)]"
              >
                <div 
                  className="flex-1 bg-white/95 backdrop-blur-sm rounded-2xl shadow-sm border border-gray-100 overflow-hidden transition-all duration-300"
                  style={{ 
                    WebkitBackdropFilter: "blur(10px)",
                    boxShadow: "0 8px 20px rgba(0, 0, 0, 0.025), 0 4px 8px rgba(0, 0, 0, 0.015)"
                  }}
                >
                  <Textarea
                    className="resize-none h-full w-full text-base border-0 p-5 focus-visible:ring-0 focus-visible:ring-offset-0 placeholder:text-gray-400 min-h-[180px] hardware-accelerated"
                    placeholder="Digite aqui o que estiver em sua mente..."
                    value={textContent}
                    onChange={(e) => setTextContent(e.target.value)}
                    disabled={processingFeedback}
                    style={{
                      transition: "all 0.2s ease",
                      lineHeight: "1.6"
                    }}
                  />
                </div>
                
                <div 
                  className="my-4 bg-white/95 backdrop-blur-sm p-4 rounded-xl border border-gray-100 transition-all duration-300"
                  style={{ 
                    WebkitBackdropFilter: "blur(10px)",
                    boxShadow: "0 4px 15px rgba(0, 0, 0, 0.02)"
                  }}
                >
                  <label className="text-[13px] font-medium text-gray-700 mb-2 flex items-center">
                    <div 
                      className="bg-primary/10 rounded-full p-1 mr-2"
                      style={{
                        boxShadow: "0 1px 2px rgba(0, 172, 138, 0.08) inset"
                      }}
                    >
                      <Smile className="h-3.5 w-3.5 text-primary" />
                    </div>
                    <span>Como você está se sentindo agora?</span>
                  </label>
                  <Select
                    value={mood}
                    onValueChange={setMood}
                    disabled={processingFeedback}
                  >
                    <SelectTrigger 
                      className="bg-white h-12 text-sm rounded-xl border-gray-200 mt-2"
                      style={{
                        boxShadow: "0 1px 3px rgba(0, 0, 0, 0.03)",
                        transition: "all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1)"
                      }}
                    >
                      <SelectValue placeholder="Selecione seu humor atual" />
                    </SelectTrigger>
                    <SelectContent className="bg-white/95 backdrop-blur-md border-gray-100 rounded-xl overflow-hidden">
                      <SelectItem value="muito-feliz">😄 Muito Feliz</SelectItem>
                      <SelectItem value="feliz">🙂 Feliz</SelectItem>
                      <SelectItem value="neutro">😐 Neutro</SelectItem>
                      <SelectItem value="triste">😔 Triste</SelectItem>
                      <SelectItem value="muito-triste">😞 Muito Triste</SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                
                <div className="flex gap-3 mt-auto pb-safe">
                  <Button 
                    variant="outline"
                    className="h-12 flex-1 text-sm rounded-xl border-gray-200 bg-white shadow-sm font-medium transition-all duration-300"
                    style={{
                      boxShadow: "0 2px 8px rgba(0, 0, 0, 0.03)",
                      transform: "translateY(0)"
                    }}
                    onClick={toggleInputMode}
                    onMouseDown={(e) => {
                      e.currentTarget.style.transform = "translateY(1px)";
                      e.currentTarget.style.boxShadow = "0 1px 3px rgba(0, 0, 0, 0.02)";
                    }}
                    onMouseUp={(e) => {
                      e.currentTarget.style.transform = "translateY(0)";
                      e.currentTarget.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.03)";
                    }}
                    onTouchStart={(e) => {
                      e.currentTarget.style.transform = "translateY(1px)";
                      e.currentTarget.style.boxShadow = "0 1px 3px rgba(0, 0, 0, 0.02)";
                    }}
                    onTouchEnd={(e) => {
                      e.currentTarget.style.transform = "translateY(0)";
                      e.currentTarget.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.03)";
                    }}
                  >
                    <Mic className="mr-2 h-4 w-4 text-gray-600" />
                    Usar voz
                  </Button>
                  
                  <Button 
                    onClick={processTextInput}
                    className="h-12 flex-1 text-sm bg-primary hover:bg-primary/90 rounded-xl font-medium shadow-sm transition-all duration-300"
                    disabled={processingFeedback || !textContent.trim()}
                    style={{
                      boxShadow: (processingFeedback || !textContent.trim()) 
                        ? "0 2px 5px rgba(0, 0, 0, 0.05)" 
                        : "0 4px 12px rgba(0, 172, 138, 0.15)",
                      transform: "translateY(0)",
                      opacity: textContent.trim() ? 1 : 0.7
                    }}
                    onMouseDown={(e) => {
                      if (!processingFeedback && textContent.trim()) {
                        e.currentTarget.style.transform = "translateY(1px)";
                        e.currentTarget.style.boxShadow = "0 2px 5px rgba(0, 172, 138, 0.1)";
                      }
                    }}
                    onMouseUp={(e) => {
                      if (!processingFeedback && textContent.trim()) {
                        e.currentTarget.style.transform = "translateY(0)";
                        e.currentTarget.style.boxShadow = "0 4px 12px rgba(0, 172, 138, 0.15)";
                      }
                    }}
                    onTouchStart={(e) => {
                      if (!processingFeedback && textContent.trim()) {
                        e.currentTarget.style.transform = "translateY(1px)";
                        e.currentTarget.style.boxShadow = "0 2px 5px rgba(0, 172, 138, 0.1)";
                      }
                    }}
                    onTouchEnd={(e) => {
                      if (!processingFeedback && textContent.trim()) {
                        e.currentTarget.style.transform = "translateY(0)";
                        e.currentTarget.style.boxShadow = "0 4px 12px rgba(0, 172, 138, 0.15)";
                      }
                    }}
                  >
                    {processingFeedback ? (
                      <>
                        <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                        {processingStep?.split("...")[0] || "Processando"}
                      </>
                    ) : (
                      <>
                        <Send className="mr-2 h-4 w-4" />
                        Salvar
                      </>
                    )}
                  </Button>
                </div>
              </m.div>
            ) : (
              <m.div
                key="audio-input"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ duration: 0.2, ease: "easeOut" }}
                className="w-full flex-1 flex flex-col items-center justify-center max-h-[calc(100dvh-220px)]"
              >
                {isRecording ? (
                  // ESTADO DE GRAVAÇÃO - Animações mais suaves e feedback visual mais claro
                  <div className="flex flex-col items-center justify-center w-full py-6">
                    <div className="relative w-32 h-32 mb-8">
                      {/* Ondas de pulsação */}
                      <m.div 
                        className="absolute inset-0 rounded-full bg-primary/5"
                        animate={{ 
                          scale: [1, 1.5, 1],
                          opacity: [0.5, 0.2, 0.5]
                        }}
                        transition={{ 
                          duration: 3, 
                          ease: "easeInOut", 
                          repeat: Infinity,
                          repeatType: "reverse" 
                        }}
                      />
                      <m.div 
                        className="absolute inset-[15%] rounded-full bg-primary/10"
                        animate={{ 
                          scale: [1, 1.3, 1],
                          opacity: [0.6, 0.3, 0.6]
                        }}
                        transition={{ 
                          duration: 2.5, 
                          ease: "easeInOut", 
                          repeat: Infinity,
                          repeatType: "reverse",
                          delay: 0.2
                        }}
                      />
                      
                      {/* Círculo central com microfone */}
                      <div className="absolute inset-0 w-full h-full flex items-center justify-center">
                        <div className="bg-white rounded-full w-20 h-20 flex items-center justify-center shadow-lg">
                          <Mic className="h-10 w-10 text-primary" />
                        </div>
                      </div>
                    </div>
                    
                    <div className="bg-white px-6 py-3 rounded-full mb-6 shadow-sm">
                      <p className="text-2xl font-semibold text-primary">{formatTime(recordingTime)}</p>
                    </div>
                    
                    <p className="text-sm text-gray-600 mb-8">Toque para finalizar a gravação</p>
                    
                    <Button 
                      variant="outline"
                      className="h-14 w-14 rounded-full shadow-sm border-red-200 bg-white hover:bg-red-50"
                      onClick={stopRecording}
                    >
                      <StopCircle className="h-8 w-8 text-red-500" />
                    </Button>
                  </div>
                ) : audioUrl ? (
                  // ESTADO COM ÁUDIO GRAVADO - Redesenhado com elementos de glassmorphism, gradientes e estilos iOS
                  <div className="w-full space-y-4">
                    <div 
                      className="bg-white/95 backdrop-blur-sm p-5 rounded-2xl border border-gray-100 transition-all duration-300"
                      style={{ 
                        WebkitBackdropFilter: "blur(10px)",
                        boxShadow: "0 10px 25px rgba(0, 0, 0, 0.03), 0 4px 10px rgba(0, 0, 0, 0.02)"
                      }}
                    >
                      <div className="flex items-center justify-between mb-5">
                        <div className="flex items-center">
                          <div 
                            className="bg-gradient-to-br from-primary/20 to-primary/10 rounded-full p-2.5 mr-3"
                            style={{
                              boxShadow: "0 2px 6px rgba(0, 172, 138, 0.1) inset"
                            }}
                          >
                            <FileAudio className="h-5 w-5 text-primary" />
                          </div>
                          <div>
                            <p className="text-xs text-gray-500">Gravação de áudio</p>
                            <p className="text-sm font-semibold text-gray-800">{formatTime(recordingTime)}</p>
                          </div>
                        </div>
                        
                        <Button 
                          variant="ghost" 
                          size="icon"
                          className="h-9 w-9 rounded-full hover:bg-red-50 transition-all duration-300"
                          style={{
                            boxShadow: "0 1px 3px rgba(0, 0, 0, 0.05)",
                            transform: "translateY(0)"
                          }}
                          onClick={deleteAudio}
                          onMouseDown={(e) => {
                            e.currentTarget.style.transform = "translateY(1px)";
                            e.currentTarget.style.boxShadow = "0 0 2px rgba(0, 0, 0, 0.05)";
                          }}
                          onMouseUp={(e) => {
                            e.currentTarget.style.transform = "translateY(0)";
                            e.currentTarget.style.boxShadow = "0 1px 3px rgba(0, 0, 0, 0.05)";
                          }}
                          onTouchStart={(e) => {
                            e.currentTarget.style.transform = "translateY(1px)";
                            e.currentTarget.style.boxShadow = "0 0 2px rgba(0, 0, 0, 0.05)";
                          }}
                          onTouchEnd={(e) => {
                            e.currentTarget.style.transform = "translateY(0)";
                            e.currentTarget.style.boxShadow = "0 1px 3px rgba(0, 0, 0, 0.05)";
                          }}
                        >
                          <X className="h-5 w-5 text-red-500" />
                        </Button>
                      </div>
                      
                      <div 
                        className="bg-white/90 backdrop-blur-sm rounded-xl p-3 hardware-accelerated"
                        style={{ 
                          boxShadow: "0 1px 3px rgba(0, 0, 0, 0.05) inset",
                          WebkitBackdropFilter: "blur(5px)"
                        }}
                      >
                        <audio 
                          controls 
                          src={audioUrl} 
                          className="w-full" 
                          style={{
                            height: "40px", 
                            borderRadius: "8px",
                          }}
                        />
                      </div>
                      
                      <div className="mt-5 pt-4 border-t border-gray-100">
                        <div className="bg-white rounded-lg hardware-accelerated">
                          <label className="text-[13px] font-medium text-gray-700 mb-2 flex items-center">
                            <div 
                              className="bg-primary/10 rounded-full p-1 mr-2"
                              style={{
                                boxShadow: "0 1px 2px rgba(0, 172, 138, 0.08) inset"
                              }}
                            >
                              <Smile className="h-3.5 w-3.5 text-primary" />
                            </div>
                            <span>Como você está se sentindo agora?</span>
                          </label>
                          <Select
                            value={transcriberMood}
                            onValueChange={setTranscriberMood}
                          >
                            <SelectTrigger 
                              className="bg-white h-12 text-sm rounded-xl border-gray-200 mt-2"
                              style={{
                                boxShadow: "0 1px 3px rgba(0, 0, 0, 0.03)",
                                transition: "all 0.3s cubic-bezier(0.25, 0.1, 0.25, 1)"
                              }}
                            >
                              <SelectValue placeholder="Selecione seu humor atual" />
                            </SelectTrigger>
                            <SelectContent className="bg-white/95 backdrop-blur-md border-gray-100 rounded-xl overflow-hidden">
                              <SelectItem value="muito-feliz">😄 Muito Feliz</SelectItem>
                              <SelectItem value="feliz">🙂 Feliz</SelectItem>
                              <SelectItem value="neutro">😐 Neutro</SelectItem>
                              <SelectItem value="triste">😔 Triste</SelectItem>
                              <SelectItem value="muito-triste">😞 Muito Triste</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex gap-3 pb-safe">
                      <Button 
                        variant="outline"
                        className="h-12 flex-1 text-sm rounded-xl border-gray-200 bg-white shadow-sm font-medium transition-all duration-300"
                        style={{
                          boxShadow: "0 2px 8px rgba(0, 0, 0, 0.03)",
                          transform: "translateY(0)"
                        }}
                        onClick={toggleInputMode}
                        onMouseDown={(e) => {
                          e.currentTarget.style.transform = "translateY(1px)";
                          e.currentTarget.style.boxShadow = "0 1px 3px rgba(0, 0, 0, 0.02)";
                        }}
                        onMouseUp={(e) => {
                          e.currentTarget.style.transform = "translateY(0)";
                          e.currentTarget.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.03)";
                        }}
                        onTouchStart={(e) => {
                          e.currentTarget.style.transform = "translateY(1px)";
                          e.currentTarget.style.boxShadow = "0 1px 3px rgba(0, 0, 0, 0.02)";
                        }}
                        onTouchEnd={(e) => {
                          e.currentTarget.style.transform = "translateY(0)";
                          e.currentTarget.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.03)";
                        }}
                      >
                        <PencilLine className="mr-2 h-4 w-4 text-gray-600" />
                        Usar texto
                      </Button>
                      
                      <Button 
                        onClick={transcribeAudio}
                        className="h-12 flex-1 text-sm bg-primary hover:bg-primary/90 rounded-xl font-medium shadow-sm transition-all duration-300"
                        disabled={processingFeedback}
                        style={{
                          boxShadow: processingFeedback 
                            ? "0 2px 5px rgba(0, 0, 0, 0.05)" 
                            : "0 4px 12px rgba(0, 172, 138, 0.15)",
                          transform: "translateY(0)"
                        }}
                        onMouseDown={(e) => {
                          if (!processingFeedback) {
                            e.currentTarget.style.transform = "translateY(1px)";
                            e.currentTarget.style.boxShadow = "0 2px 5px rgba(0, 172, 138, 0.1)";
                          }
                        }}
                        onMouseUp={(e) => {
                          if (!processingFeedback) {
                            e.currentTarget.style.transform = "translateY(0)";
                            e.currentTarget.style.boxShadow = "0 4px 12px rgba(0, 172, 138, 0.15)";
                          }
                        }}
                        onTouchStart={(e) => {
                          if (!processingFeedback) {
                            e.currentTarget.style.transform = "translateY(1px)";
                            e.currentTarget.style.boxShadow = "0 2px 5px rgba(0, 172, 138, 0.1)";
                          }
                        }}
                        onTouchEnd={(e) => {
                          if (!processingFeedback) {
                            e.currentTarget.style.transform = "translateY(0)";
                            e.currentTarget.style.boxShadow = "0 4px 12px rgba(0, 172, 138, 0.15)";
                          }
                        }}
                      >
                        {processingFeedback ? (
                          <>
                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                            {processingStep?.split("...")[0] || "Processando"}
                          </>
                        ) : (
                          <>
                            <Sparkles className="mr-2 h-4 w-4" />
                            Analisar
                          </>
                        )}
                      </Button>
                    </div>
                  </div>
                ) : (
                  // ESTADO INICIAL - Design estilo iOS com gradientes suaves e efeitos de glassmorphism
                  <div className="flex flex-col items-center justify-center w-full px-4 py-5">
                    <div className="mb-8 relative">
                      {/* Círculos de pulsação decorativos */}
                      <div className="absolute inset-0 rounded-full bg-primary/5 animate-pulse-subtle" style={{ animationDuration: "4s" }}></div>
                      <div className="absolute inset-[15%] rounded-full bg-primary/10 animate-pulse-subtle" style={{ animationDuration: "3.5s", animationDelay: "0.5s" }}></div>
                      
                      {/* Botão principal - estilo elevado com gradiente e sombras suaves */}
                      <button 
                        onClick={startRecording}
                        className="relative w-40 h-40 rounded-full overflow-hidden transition-all duration-300"
                        style={{
                          transform: "translateY(0)",
                          boxShadow: "0 15px 35px rgba(0, 172, 138, 0.15), 0 5px 15px rgba(0, 0, 0, 0.05)",
                        }}
                        onMouseDown={(e) => {
                          e.currentTarget.style.transform = "translateY(3px)";
                          e.currentTarget.style.boxShadow = "0 5px 15px rgba(0, 172, 138, 0.1), 0 2px 5px rgba(0, 0, 0, 0.05)";
                        }}
                        onMouseUp={(e) => {
                          e.currentTarget.style.transform = "translateY(0)";
                          e.currentTarget.style.boxShadow = "0 15px 35px rgba(0, 172, 138, 0.15), 0 5px 15px rgba(0, 0, 0, 0.05)";
                        }}
                        onTouchStart={(e) => {
                          e.currentTarget.style.transform = "translateY(3px)";
                          e.currentTarget.style.boxShadow = "0 5px 15px rgba(0, 172, 138, 0.1), 0 2px 5px rgba(0, 0, 0, 0.05)";
                        }}
                        onTouchEnd={(e) => {
                          e.currentTarget.style.transform = "translateY(0)";
                          e.currentTarget.style.boxShadow = "0 15px 35px rgba(0, 172, 138, 0.15), 0 5px 15px rgba(0, 0, 0, 0.05)";
                        }}
                      >
                        {/* Gradiente de fundo */}
                        <div className="absolute inset-0 bg-gradient-to-br from-primary/30 to-primary/10"></div>
                        
                        {/* Círculo interno */}
                        <div className="absolute inset-[6px] rounded-full flex items-center justify-center bg-white backdrop-blur-md border-[6px] border-primary/20">
                          <Mic className="h-16 w-16 text-primary drop-shadow-sm" />
                        </div>
                      </button>
                    </div>
                    
                    <p className="text-lg font-medium text-gray-800 mb-2">Toque para começar a falar</p>
                    <p className="text-[13px] text-gray-600 mb-10 max-w-64 text-center">
                      Conte como foi seu dia ou registre seus pensamentos
                    </p>
                    
                    <div className="w-full">
                      <Button 
                        variant="outline"
                        className="w-full h-12 bg-white shadow-sm border-gray-200 rounded-xl text-sm font-medium transition-all duration-300"
                        style={{
                          boxShadow: "0 2px 8px rgba(0, 0, 0, 0.03)",
                          transform: "translateY(0)",
                        }}
                        onClick={toggleInputMode}
                        onMouseDown={(e) => {
                          e.currentTarget.style.transform = "translateY(1px)";
                          e.currentTarget.style.boxShadow = "0 1px 3px rgba(0, 0, 0, 0.02)";
                        }}
                        onMouseUp={(e) => {
                          e.currentTarget.style.transform = "translateY(0)";
                          e.currentTarget.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.03)";
                        }}
                        onTouchStart={(e) => {
                          e.currentTarget.style.transform = "translateY(1px)";
                          e.currentTarget.style.boxShadow = "0 1px 3px rgba(0, 0, 0, 0.02)";
                        }}
                        onTouchEnd={(e) => {
                          e.currentTarget.style.transform = "translateY(0)";
                          e.currentTarget.style.boxShadow = "0 2px 8px rgba(0, 0, 0, 0.03)";
                        }}
                      >
                        <PencilLine className="mr-2 h-4 w-4 text-gray-600" />
                        Prefiro escrever uma nota
                      </Button>
                    </div>
                  </div>
                )}
              </m.div>
            )}
          </AnimatePresence>
        </LazyMotion>
      </div>
      
      {/* Onda decorativa estilizada para iOS com gradiente mais suave */}
      <div className="h-10 w-full mt-auto overflow-hidden relative">
        <div className="absolute bottom-0 left-0 w-full overflow-hidden z-0 pointer-events-none">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1440 320" className="w-full">
            <defs>
              <linearGradient id="wave-gradient" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" stopColor="hsl(var(--primary)/0.15)" />
                <stop offset="50%" stopColor="hsl(var(--primary)/0.2)" />
                <stop offset="100%" stopColor="hsl(var(--primary)/0.15)" />
              </linearGradient>
            </defs>
            <path fill="url(#wave-gradient)" fillOpacity="1" 
              d="M0,128L48,122.7C96,117,192,107,288,122.7C384,139,480,181,576,186.7C672,192,768,160,864,149.3C960,139,1056,149,1152,149.3C1248,149,1344,139,1392,133.3L1440,128L1440,320L1392,320C1344,320,1248,320,1152,320C1056,320,960,320,864,320C768,320,672,320,576,320C480,320,384,320,288,320C192,320,96,320,48,320L0,320Z">
            </path>
          </svg>
        </div>
      </div>
    </div>
  );
}